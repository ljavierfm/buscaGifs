{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","handleSubmit","e","preventDefault","trim","length","console","log","categories","onSubmit","value","type","onChange","target","className","onClick","prototype","PropTypes","func","isRequired","getGifs","category","a","url","encodeURI","fetch","respuesta","json","imgObjects","data","gifs","map","imgObject","id","title","images","downsized_medium","GifGridItem","src","alt","GifGrid","imagenes","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"2MAQaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEZC,mBAAS,IAFG,mBAEzCC,EAFyC,KAE7BC,EAF6B,KAW1CC,EAAe,SAACC,GAEpBA,EAAEC,iBAGEJ,EAAWK,OAAOC,OAAS,IAK7BC,QAAQC,IAAI,mBAAoBR,GAChCF,GAAc,SAACW,GAAD,OAAiBT,GAAjB,mBAAgCS,OAI9CR,EAAc,MAGlB,OAEE,cADA,CACA,QAAMS,SAAUR,EAAhB,UACE,uBACES,MAAOX,EACPY,KAAK,OACLC,SA9ByB,SAACV,GAE9BF,EAAcE,EAAEW,OAAOH,QA6BnBI,UAAU,6BAEZ,wBACEC,QAASd,EACTU,KAAK,SACLG,UAAU,uBAHZ,2BAYNlB,EAAYoB,UAAY,CACtBnB,c,OAAeoB,EAAUC,KAAKC,Y,2BCvDnBC,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEfC,EAFe,iDAEiCC,UAAUH,GAF3C,+DAGGI,MAAMF,GAHT,cAGfG,EAHe,gBAMcA,EAAUC,OANxB,uBAMPC,EANO,EAMbC,KAGFC,EAAOF,EAAWG,KAAI,SAACC,GAAe,IAAD,EACzC,MAAO,CACLC,GAAID,EAAUC,GACdC,MAAOF,EAAUE,MACjBX,IAAG,UAAES,EAAUG,cAAZ,aAAE,EAAkBC,iBAAiBb,QAbvB,kBAiBZO,GAjBY,4CAAH,sDCaLO,EAXK,SAAC,GAAwB,IAAtBJ,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,MAAOX,EAAU,EAAVA,IAChC,OACE,sBAAcT,UAAU,iDAAxB,UACE,qBAAKwB,IAAKf,EAAKT,UAAU,eAAeyB,IAAKL,IAC7C,qBAAKpB,UAAU,YAAf,SACE,oBAAIA,UAAU,aAAd,SAA4BoB,QAHtBD,ICsBCO,EAtBC,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECDN,SAACA,GAAc,IAAD,EACdvB,mBAAS,CACjC2C,SAAU,GACVC,SAAS,IAH6B,mBACjCC,EADiC,KAC1BC,EAD0B,KAgBxC,OATAC,qBAAU,WACRzB,EAAQC,GAAUyB,MAAK,SAACC,GAAD,OACrBH,EAAS,CACPH,SAAUM,EACVL,SAAS,SAGZ,CAACrB,IAEGsB,EDTqBK,CAAa3B,GAAlCoB,EANyB,EAMzBA,SAASC,EANgB,EAMhBA,QAEd,OACE,qCACE,oBAAI5B,UAAU,UAAd,SAAyBO,IACxBqB,GAAS,2CACV,qBAAK5B,UAAU,YAAf,SAEG2B,EAASV,KAAI,gBAAGE,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAOX,EAAd,EAAcA,IAAd,OACZ,cAAC,EAAD,CAAsBW,MAAOA,EAAOX,IAAKA,GAAvBU,YEjBjBgB,EAAe,WAAO,IAAD,EACMnD,mBAAS,CAAC,UADhB,mBACvBU,EADuB,KACXX,EADW,KAGhC,OACE,qCACE,8CAEA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAECS,QAAQC,IAAI,yBAAyBC,GACnCA,EAAWuB,KAAI,SAACV,GAAD,OACd,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,U,kBCXxB6B,IAASC,OAAO,cAAC,EAAD,IAAiBC,SAASC,eAAe,W","file":"static/js/main.56247a20.chunk.js","sourcesContent":["/*\r\n* Este componente renderiza un formulario donde se añaden categorias al listado\r\n* recibe el setCategories del componente padre para actualizarle las categorias al mismo\r\n*/\r\n\r\nimport React, { useState } from 'react'\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n  //propiedad que recoge el valor del input donde se añade la categoria\r\n  const [inputValue, setInputValue] = useState('');\r\n\r\n  //se llama cuando se dispara el evento onChange del input\r\n  const handleInputValueChange = (e) => {\r\n    //cambiar el valor de la propiedad inputValue con el valor del input\r\n    setInputValue(e.target.value);\r\n  };\r\n\r\n  //controla el envio del formulario, no hay botón de envío. Es al teclear la enter\r\n  const handleSubmit = (e) => {\r\n    //cancela el evento, lo que significa que cualquier acción por defecto que deba producirse como resultado de este evento\r\n    e.preventDefault();\r\n\r\n    //evitamos que se manden categorias vacias o sin sentido controlando la longitud de la cadena del input\r\n    if (inputValue.trim().length > 2) {\r\n      /*\r\n      * setCategories puede pasar como parámetro el valor anterior ( array de categorias)\r\n      * al Array se le añade la nueva categoria escrita en el formulario\r\n     */\r\n      console.log('input en el form', inputValue);\r\n      setCategories((categories) => [inputValue, ...categories]);\r\n\r\n\r\n      //evitamos el doble posteo\r\n      setInputValue('');\r\n    }\r\n  };\r\n  return (\r\n    //no es necsario un fragment <> porque el form es un agrupador de etiquetas también\r\n    <form onSubmit={handleSubmit}>\r\n      <input\r\n        value={inputValue}\r\n        type=\"text\"\r\n        onChange={handleInputValueChange}\r\n        className=\"form-control-sm busqueda\"\r\n      ></input>\r\n      <button\r\n        onClick={handleSubmit}\r\n        type=\"submit\"\r\n        className=\"btn btn-primary mb-2\"\r\n      >\r\n        Añadir\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n\r\n/* obligamos a que nos pasen las categorias siempre que se use este componente*/\r\nAddCategory.prototype = {\r\n  setCategories: PropTypes.func.isRequired\r\n};\r\n","/*\r\n* Dada una categoria obtiene desde giphy un Array de imágenes\r\n*/\r\n\r\nexport const getGifs = async (category) => {\r\n\r\n  const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=JKvhJOHo1ipcjStQhiUfzlCiWuODlCuC`;\r\n  const respuesta = await fetch(url);\r\n\r\n  //desestructuramos para solo obtener el array de imagenes\r\n  const { data: imgObjects } = await respuesta.json();\r\n\r\n  //se mapea para crear un array con objetos imagen, sacando el id y la url\r\n  const gifs = imgObjects.map((imgObject) => {\r\n    return {\r\n      id: imgObject.id,\r\n      title: imgObject.title,\r\n      url: imgObject.images?.downsized_medium.url,\r\n    };\r\n  });\r\n\r\n    return gifs;\r\n};\r\n","/*\r\n* Renderiza una imagen y sus propiedades, al recibir estos desde el componente padre\r\n*/\r\n\r\nimport React from 'react'\r\n\r\nconst GifGridItem = ({ id, title, url }) => {\r\n  return (\r\n    <div key={id} className=\"card tarjeta animate__animated animate__fadeIn\">\r\n      <img src={url} className=\"card-img-top\" alt={title}></img>\r\n      <div className=\"card-body\">\r\n        <h5 className=\"card-title\">{title}</h5>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GifGridItem;\r\n","/*\r\n* Renderiza un conjunto de imágenes pertenecientes a la categoria que recibe\r\n*/\r\n\r\nimport React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport GifGridItem from './GifGridItem';\r\n\r\nconst GifGrid = ({ category }) => {\r\n\r\n  /* Usa un custom hook que llama metodo para cargar imagenes\r\n  *  controla que no se recargue, a no ser que cambie la categoria del componente\r\n  *  en el retorno devuelve las imagenes y booleano para saber si cargó la info\r\n  */\r\n  const {imagenes,loading } = useFetchGifs(category);\r\n\r\n    return (\r\n      <>\r\n        <h3 className=\"limpiar\">{category}</h3>\r\n        {loading&&<p>loading...</p>}\r\n        <div className=\"card-grid\">\r\n          {/* por cada imagen de la categoria que esta mostrando, llama a un componente que la renderiza */}\r\n          {imagenes.map(({ id, title, url }) => (\r\n            <GifGridItem key={id} title={title} url={url}></GifGridItem>\r\n          ))}\r\n        </div>\r\n      </>\r\n    );\r\n}\r\n\r\nexport default GifGrid\r\n","/*\r\n*\r\n* No se importa React porque no usamos JSX\r\n*/\r\nimport { useEffect, useState } from 'react';\r\nimport { getGifs } from '../helpers/getGifs'\r\n\r\nexport const useFetchGifs = (category) => {\r\n  const [state, setState] = useState({\r\n    imagenes: [],\r\n    loading: true,\r\n  });\r\n\r\n  //los efectos no pueden ser async\r\n  useEffect(() => {\r\n    getGifs(category).then((imgs) =>\r\n      setState({\r\n        imagenes: imgs,\r\n        loading: false,\r\n      })\r\n    );\r\n  }, [category]);\r\n\r\n  return state; //imagenes:[], loading:true\r\n}","import React, { useState } from \"react\";\r\n\r\n\r\nimport { AddCategory } from \"./components/AddCategory\";\r\nimport GifGrid from \"./components/GifGrid\";\r\n\r\nexport const GifExpertApp = () => {\r\n    const [categories, setCategories] = useState(['Ducks']);\r\n\r\n  return (\r\n    <>\r\n      <h2>GifExpertApp</h2>\r\n      {/* se renderiza componente con formulario para añadir categorias */}\r\n      <AddCategory setCategories={setCategories}></AddCategory>\r\n      <hr />\r\n      {/* Por cada categoria va a renderizar un componente que agrupa un listado de imagenes de la categoria */}\r\n      {console.log('categorias almacenadas',categories)}\r\n        {categories.map((category) => (\r\n          <GifGrid key={category} category={category}></GifGrid>\r\n        ))}\r\n    </>\r\n  );\r\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"animate.css/animate.css\";\n\nReactDOM.render(<GifExpertApp/>, document.getElementById(\"root\"));\n"],"sourceRoot":""}